---
import type { Project } from '@types';
import Tag from '../ui/Tag.astro';
import Icons from '../common/Icons.astro';

interface Props {
  project: Project;
  featured?: boolean;
  showTitle?: boolean;
}

const { project, featured = false, showTitle = true } = Astro.props;

// Determinar el estado del proyecto (Destacado, Nuevo, etc.)
const status = featured ? "Destacado" : "Proyecto";

// Procesar la URL del proyecto para los diferentes enlaces
const githubUrl = project.url && project.url.includes('github.com') ? project.url : null;
const webUrl = project.url && !project.url.includes('github.com') ? project.url : null;

// Generar URL para la imagen basada en el nombre del proyecto
const projectImageSvg = `/portfolio-personal/images/projects/${project.name.toLowerCase().replace(/\s+/g, '-')}.svg`;
const defaultImage = `/portfolio-personal/images/project-placeholder.svg`;

// Función para obtener el ícono adecuado según la tecnología
function getTechIconComponent(tech: string): "vercel" |"astro" | "vue" | "nuxt" | "react" | "typescript" | "javascript" | "node" | "python" | "mongodb" | "firebase" | "supabase" | "tailwind" | "docker" | "git" | "github" | null {
  const techIconMap: Record<string, "vercel" |"astro" | "vue" | "nuxt" | "react" | "typescript" | "javascript" | "node" | "python" | "mongodb" | "firebase" | "supabase" | "tailwind" | "docker" | "git" | "github"> = {
    'Python': 'python',
    'Vue.js': 'vue',
    'Vue 3': 'vue',
    'Nuxt 3': 'nuxt',
    'Nuxt.js': 'nuxt',
    'Vercel': 'vercel',
    'React': 'react',
    'TypeScript': 'typescript',
    'JavaScript': 'javascript',
    'Node.js': 'node',
    'Node': 'node',
    'MongoDB': 'mongodb',
    'Firebase': 'firebase',
    'Supabase': 'supabase',
    'Docker': 'docker',
    'GitHub': 'github',
    'Git': 'git',
    'Tailwind': 'tailwind',
    'Tailwind CSS': 'tailwind',
    'Astro': 'astro'
  };

  return techIconMap[tech] || null;
}

// Función para obtener el ícono emoji para las tecnologías sin ícono en el componente
function getTechIcon(tech: string): string {
  const techIcons: Record<string, string> = {
    'pyautogui': '🤖',
  };

  return techIcons[tech] || '🔧'; // Emoji predeterminado si no se encuentra la tecnología
}

// Limitar la descripción a un número de caracteres
const MAX_CHARS = 100;
const isTruncated = project.description.length > MAX_CHARS;
const visibleDescription = isTruncated 
  ? project.description.substring(0, MAX_CHARS) + '...' 
  : project.description;
const descriptionId = `desc-${project.name.replace(/\s+/g, '-')}`;
---

<div class="project-card" data-featured={featured} data-animate="fade-in">
  <div class="project-card-overlay"></div>
  
  {featured && (
    <div class="feature-badge" title="Proyecto destacado">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="16" height="16">
        <path d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
      </svg>
    </div>
  )}
  
  <div class="project-image-container">
    <img 
      src={projectImageSvg} 
      alt={`Captura de pantalla de ${project.name}`} 
      class="project-image"
      loading="lazy"
      onerror={`this.onerror=null; this.src='${defaultImage}'`}
    />
    <div class="status-tag-container">
      <span class="project-tag">{status}</span>
    </div>
  </div>

  <div class="project-content">
    {showTitle && (
      <h2 class="project-title">
        {project.name}
        {project.isNew && <span class="new-badge">Nuevo</span>}
      </h2>
    )}
    
    <div class="description-container">
      {isTruncated ? (
        <>
          <p class="project-description-short">{visibleDescription}</p>
          <p class="project-description-full">{project.description}</p>
          <button class="read-more-btn" onclick="toggleDescription(this)">Leer más</button>
        </>
      ) : (
        <p class="project-description">{project.description}</p>
      )}
    </div>
    
    {project.highlights && project.highlights.length > 0 && (
      <div class="project-highlights">
        <button class="highlights-toggle" aria-expanded="false" aria-controls={`highlights-${project.name.replace(/\s+/g, '-')}`} type="button">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="toggle-icon">
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
          <span>Características destacadas</span>
        </button>
        
        <ul id={`highlights-${project.name.replace(/\s+/g, '-')}`} class="highlights-list">
          {project.highlights.map((highlight) => (
            <li>{highlight}</li>
          ))}
        </ul>
      </div>
    )}
    
    <div class="tech-tags">
      {project.technologies && project.technologies.map((tech: string, index: number) => {
        const iconName = getTechIconComponent(tech);
        return index < 5 ? (
          <div class="tech-tag-wrapper" style={`--delay: ${index * 0.1}s`}>
            <span class="tech-tag" title={tech}>
              {iconName ? (
                <span class="tech-icon-circle">
                  <Icons name={iconName} size={18} class="tech-icon-svg" />
                </span>
              ) : (
                <span class="tech-icon-circle">
                  <span class="tech-emoji">{getTechIcon(tech)}</span>
                </span>
              )}
            </span>
            <span class="tech-tooltip">{tech}</span>
          </div>
        ) : null;
      })}
      {project.technologies && project.technologies.length > 5 && (
        <div class="tech-tag-wrapper" style={`--delay: 0.5s`}>
          <span class="tech-tag more-tag">+{project.technologies.length - 5}</span>
          <span class="tech-tooltip">Ver más tecnologías</span>
        </div>
      )}
    </div>
    
    <div class="project-links">
      {githubUrl && (
        <a href={githubUrl} class="project-link github-link" target="_blank" rel="noopener noreferrer">
          <Icons name="github" size={16} class="link-icon" />
          <span>GitHub</span>
        </a>
      )}
      
      {webUrl && (
        <a href={webUrl} class="project-link web-link" target="_blank" rel="noopener noreferrer">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="2" y1="12" x2="22" y2="12"></line>
            <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
          </svg>
          <span>Sitio Web</span>
        </a>
      )}
    </div>
  </div>
</div>

<style>
  .project-card {
    display: flex;
    flex-direction: column;
    border-radius: 0.75rem;
    overflow: hidden;
    background-color: var(--color-card, #ffffff);
    border: 1px solid var(--color-border, #e5e7eb);
    box-shadow: 
      0 4px 6px -1px rgba(0, 0, 0, 0.1), 
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transition: 
      transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275), 
      box-shadow 0.4s ease, 
      background-color 0.3s ease;
    position: relative;
    height: 100%;
    opacity: 0;
    transform: translateY(30px);
  }

  .project-card.animate {
    animation: fadeInUp 0.7s ease-out forwards;
  }

  .project-card:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 
      0 20px 25px -5px rgba(0, 0, 0, 0.1), 
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .project-card:hover .project-card-overlay {
    opacity: 1;
  }

  .project-card-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg, 
      rgba(59, 130, 246, 0.05) 0%, 
      rgba(147, 197, 253, 0.08) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 1;
  }

  .feature-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    background-color: var(--color-primary, #3b82f6);
    color: white;
    border-radius: 9999px;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .feature-badge:hover {
    transform: rotate(72deg) scale(1.1);
    box-shadow: 0 6px 8px rgba(59, 130, 246, 0.4);
  }

  .new-badge {
    display: inline-flex;
    align-items: center;
    background-color: #10B981;
    color: white;
    font-size: 0.6rem;
    font-weight: 600;
    padding: 0.15rem 0.5rem;
    border-radius: 9999px;
    margin-left: 0.5rem;
    vertical-align: middle;
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
  }

  .project-image-container {
    position: relative;
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    background-color: var(--color-background-alt, #f3f4f6);
  }

  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .project-card:hover .project-image {
    transform: scale(1.05);
  }

  .status-tag-container {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    z-index: 2;
  }

  .project-tag {
    display: inline-block;
    background-color: var(--color-primary, #3b82f6);
    color: #ffffff;
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }

  .project-content {
    display: flex;
    flex-direction: column;
    padding: 1.5rem;
    flex-grow: 1;
    justify-content: space-between;
  }

  .project-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text, #1f2937);
  }

  .description-container {
    position: relative;
    margin-bottom: 1.5rem;
    min-height: 5rem;
  }

  .project-description, 
  .project-description-short, 
  .project-description-full {
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--color-text-light, #6b7280);
  }

  .project-description-short {
    display: block;
  }

  .project-description-full {
    display: none;
  }

  .description-container.expanded .project-description-short {
    display: none;
  }

  .description-container.expanded .project-description-full {
    display: block;
  }

  .read-more-btn {
    color: var(--color-primary, #3b82f6);
    background: none;
    border: none;
    padding: 0;
    font-size: 0.75rem;
    cursor: pointer;
    text-decoration: underline;
    display: block;
    margin-top: 0.5rem;
  }

  .read-more-btn:hover {
    color: var(--color-primary-dark, #2563eb);
  }

  .project-highlights {
    margin-bottom: 1.25rem;
    margin-top: 0.5rem;
  }

  .highlights-toggle {
    background-color: var(--color-primary-transparent, rgba(59, 130, 246, 0.1));
    border: 1px solid var(--color-primary-transparent, rgba(59, 130, 246, 0.2));
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-primary, #3b82f6);
    cursor: pointer;
    padding: 0.5rem 1rem;
    font-family: inherit;
    font-size: 0.875rem;
    font-weight: 500;
    width: 100%;
    text-align: center;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    transition: all 0.2s ease;
  }

  .highlights-toggle:hover {
    background-color: var(--color-primary, #3b82f6);
    color: white;
  }

  .toggle-icon {
    margin-right: 0.5rem;
    transition: transform 0.3s ease;
  }

  .highlights-toggle[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }

  .highlights-list {
    margin: 0.75rem 0;
    padding-left: 1.5rem;
    font-size: 0.875rem;
    color: var(--color-text, #1f2937);
    display: none;
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: max-height 0.3s ease, opacity 0.3s ease, margin 0.3s ease;
  }

  .highlights-list.active {
    display: block;
    max-height: 500px; /* Altura máxima para permitir la animación */
    opacity: 1;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .highlights-list li {
    margin-bottom: 0.5rem;
    position: relative;
  }

  .highlights-list li:before {
    content: "•";
    color: var(--color-primary, #3b82f6);
    font-weight: bold;
    display: inline-block;
    width: 1em;
    margin-left: -1em;
  }

  .tech-tags {
    display: flex;
    flex-wrap: wrap;
    margin-bottom: 1.25rem;
    gap: 0.5rem;
  }

  .tech-tag-wrapper {
    position: relative;
    animation: fadeInUp 0.5s ease forwards;
    animation-delay: var(--delay, 0s);
    opacity: 0;
    transform: translateY(10px);
  }

  .tech-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-5px);
    background-color: var(--color-card, #ffffff);
    color: var(--color-text, #1f2937);
    padding: 0.4rem 0.6rem;
    border-radius: 0.375rem;
    font-size: 0.7rem;
    font-weight: 500;
    white-space: nowrap;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 10;
    pointer-events: none;
  }

  .tech-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-width: 5px;
    border-style: solid;
    border-color: var(--color-card, #ffffff) transparent transparent transparent;
  }

  .tech-tag-wrapper:hover .tech-tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }

  .tech-tag {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    background-color: transparent;
    color: var(--color-text, #1f2937);
    border: none;
    transition: transform 0.2s ease;
  }

  .tech-icon-circle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.25rem;
    height: 2.25rem;
    border-radius: 50%;
    background-color: var(--color-primary-transparent, rgba(59, 130, 246, 0.1));
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
    overflow: hidden;
    transition: all 0.3s ease;
    border: 2px solid transparent;
  }

  .tech-icon-svg {
    color: #000000;
    transition: transform 0.3s ease;
  }

  .tech-emoji {
    font-size: 1.1rem;
    transition: transform 0.3s ease;
  }

  .tech-tag:hover .tech-icon-circle {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    border-color: var(--color-primary, #3b82f6);
  }

  .tech-tag:hover .tech-icon-svg,
  .tech-tag:hover .tech-emoji {
    transform: scale(1.1);
  }

  .more-tag {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.25rem;
    height: 2.25rem;
    border-radius: 50%;
    background-color: var(--color-primary-transparent, rgba(59, 130, 246, 0.1));
    color: var(--color-primary, #3b82f6);
    font-size: 0.75rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }

  .more-tag:hover {
    background-color: var(--color-primary, #3b82f6);
    color: white;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .project-links {
    display: flex;
    gap: 1rem;
    margin-top: auto;
    font-size: 0.875rem;
  }

  .project-link {
    display: flex;
    align-items: center;
    color: var(--color-primary, #3b82f6);
    font-weight: 500;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .project-link:hover {
    color: var(--color-primary-dark, #2563eb);
  }

  .project-link svg,
  .link-icon,
  .github-icon {
    margin-right: 0.375rem;
    transition: transform 0.2s ease;
  }

  .project-link:hover svg,
  .project-link:hover .link-icon,
  .project-link:hover .github-icon {
    transform: scale(1.1);
  }

  /* GitHub icon SVG styling */
  .github-icon {
    display: inline-block;
    width: 1rem;
    height: 1rem;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.166 6.839 9.489.5.092.682-.217.682-.483 0-.237-.009-.869-.014-1.704-2.782.604-3.369-1.342-3.369-1.342-.454-1.157-1.11-1.465-1.11-1.465-.908-.62.069-.608.069-.608 1.003.074 1.532 1.029 1.532 1.029.891 1.529 2.341 1.089 2.91.833.091-.647.349-1.086.635-1.337-2.22-.253-4.555-1.112-4.555-4.943 0-1.091.39-1.984 1.029-2.682-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.547 9.547 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.202 2.394.1 2.647.64.698 1.028 1.591 1.028 2.682 0 3.841-2.337 4.687-4.565 4.935.359.307.678.917.678 1.846 0 1.332-.012 2.407-.012 2.734 0 .269.18.579.688.482A10.001 10.001 0 0022 12c0-5.523-4.477-10-10-10z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .project-title {
      font-size: 1.125rem;
    }
    
    .project-description {
      font-size: 0.8125rem;
    }
  }
  
  @media print {
    .project-card {
      break-inside: avoid;
      box-shadow: none;
      border: 1px solid #ddd;
    }
    
    .project-title {
      font-size: 14pt;
    }
    
    .project-description {
      font-size: 10pt;
    }
    
    .feature-badge,
    .project-image-container,
    .tech-tags,
    .project-links,
    .project-highlights {
      display: none;
    }
  }
</style>

<script is:inline>
  function toggleDescription(button) {
    const container = button.closest('.description-container');
    container.classList.toggle('expanded');
    button.textContent = container.classList.contains('expanded') ? 'Leer menos' : 'Leer más';
  }

  // Script para manejar la funcionalidad de "Características destacadas"
  document.addEventListener('DOMContentLoaded', function() {
    const highlightButtons = document.querySelectorAll('.highlights-toggle');
    highlightButtons.forEach(function(btn) {
      btn.addEventListener('click', function(event) {
        event.preventDefault();
        
        const targetId = this.getAttribute('aria-controls');
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.classList.toggle('active');
            
            const expanded = targetElement.classList.contains('active');
            this.setAttribute('aria-expanded', expanded.toString());
            
            const buttonText = this.querySelector('span');
            if (buttonText) {
              buttonText.textContent = expanded ? 
                'Ocultar características' : 
                'Características destacadas';
            }
          }
        }
      });
    });

    // Configurar Intersection Observer para animaciones de entrada
    const observerOptions = {
      root: null, // viewport
      rootMargin: '0px',
      threshold: 0.15 // Al menos 15% del elemento debe ser visible
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          // Aplicar retraso escalonado para cada tarjeta
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, 150 * entry.target.dataset.index || 150 * index);
          
          // Dejar de observar después de animar
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Observar todas las tarjetas de proyectos
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach((card, index) => {
      card.dataset.index = index;
      observer.observe(card);
    });
  });

  // También manejar los eventos de Astro para navegación
  document.addEventListener('astro:page-load', function() {
    const event = new Event('DOMContentLoaded');
    document.dispatchEvent(event);
  });
</script>