---
// src/components/profile/ProjectCard.astro
import type { Project } from '@types';
import Card from '../ui/Card.astro';
import Tag from '../ui/Tag.astro';
// Importar las funciones y mapa de iconos del componente SocialLinks
import { detectNetworkFromUrl, getIconForUrl } from '../common/SocialLinks.astro';

interface Props {
  project: Project;
  featured?: boolean;
  showTitle?: boolean;
}

const { project, featured = false, showTitle = true } = Astro.props;

// Procesamos la URL del proyecto para obtener información adicional
const projectUrl = project.url ? new URL(project.url) : null;
const getPath = (url?: string) => url || '#';

// Función para obtener el texto del enlace según la red social
function getLinkText(url: string): string {
  if (!url) return '';
  
  const networkType = detectNetworkFromUrl(url);
  
  switch (networkType) {
    case 'GitHub':
      return 'Ver en GitHub';
    case 'Discord':
      return 'Unirse al Discord';
    default:
      return 'Visitar sitio web';
  }
}

// Generamos una URL para la imagen basada en el nombre del proyecto
const projectImageJpg = `/portfolio-personal/images/projects/${project.name.toLowerCase().replace(/\s+/g, '-')}.jpg`;
const projectImageSvg = `/portfolio-personal/images/projects/${project.name.toLowerCase().replace(/\s+/g, '-')}.svg`;
const defaultImage = `/portfolio-personal/images/project-placeholder.svg`;

// Función para verificar si una imagen existe
function getImagePath() {
  return projectImageSvg;
}

---

<Card class={`project-card ${featured ? 'featured' : ''}`}>
  <div class="project-image-container">
    <img 
      src={getImagePath()} 
      alt={`Captura de pantalla del proyecto ${project.name}`} 
      class="project-image"
      onerror={`this.onerror=null; this.src='${defaultImage}'`}
      loading="lazy"
    />
    {featured && <div class="featured-badge">Destacado</div>}
  </div>

  <div class="project-content">
    {showTitle && (
      <div class="project-header">
        <h3 class="project-title">
          <a href={getPath(project.url)} target="_blank" rel="noopener noreferrer">
            {project.name}
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="external-link-icon">
              <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
              <polyline points="15 3 21 3 21 9"></polyline>
              <line x1="10" y1="14" x2="21" y2="3"></line>
            </svg>
          </a>
        </h3>
      </div>
    )}
    
    <p class="project-description">{project.description}</p>
    
    <!-- Highlights si existen -->
    {project.highlights && project.highlights.length > 0 && (
      <div class="project-highlights-container">
        <button class="highlights-toggle" aria-expanded="false" aria-controls={`highlights-${project.name.replace(/\s+/g, '-')}`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="toggle-icon">
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
          <span>Ver características destacadas</span>
        </button>
        
        <ul id={`highlights-${project.name.replace(/\s+/g, '-')}`} class="project-highlights">
          {project.highlights.map((highlight) => (
            <li>{highlight}</li>
          ))}
        </ul>
      </div>
    )}
    
    <!-- Mostrar tecnologías como tags -->
    {project.technologies && project.technologies.length > 0 && (
      <div class="project-tags">
        {project.technologies.map((tech: string) => (
          <Tag text={tech} variant="default" size="small" />
        ))}
      </div>
    )}

    <div class="project-actions">
      {project.url && (
        <a href={getPath(project.url)} target="_blank" rel="noopener noreferrer" class="project-link">
          <span class="icon" set:html={getIconForUrl(project.url)}></span>
          <span class="link-text">{getLinkText(project.url)}</span>
        </a>
      )}
    </div>
  </div>
</Card>

<style>
  .project-card {
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
    transition: all 0.3s ease;
  }
  
  .project-image-container {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
    border-radius: var(--radius-md) var(--radius-md) 0 0;
  }
  
  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .project-card:hover .project-image {
    transform: scale(1.05);
  }
  
  .featured-badge {
    position: absolute;
    top: var(--space-sm);
    right: var(--space-sm);
    background-color: var(--color-primary);
    color: white;
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-sm);
    font-size: var(--text-xs);
    font-weight: 500;
    z-index: 1;
  }
  
  .project-content {
    padding: var(--space-md);
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-sm);
  }
  
  .project-title {
    font-size: var(--text-lg);
    margin: 0;
    color: var(--color-heading);
  }
  
  .project-title a {
    color: inherit;
    text-decoration: none;
    display: flex;
    align-items: center;
    transition: color var(--transition-fast);
  }
  
  .project-title a:hover {
    color: var(--color-primary);
  }
  
  .external-link-icon {
    margin-left: var(--space-xs);
    opacity: 0.7;
    transition: opacity var(--transition-fast), transform var(--transition-fast);
  }
  
  .project-title a:hover .external-link-icon {
    opacity: 1;
    transform: translateX(2px);
  }
  
  .project-description {
    margin-top: 0;
    margin-bottom: var(--space-md);
    color: var(--color-text);
    line-height: 1.5;
  }
  
  .project-highlights-container {
    margin: var(--space-md) 0;
  }
  
  .highlights-toggle {
    background: none;
    border: none;
    display: flex;
    align-items: center;
    color: var(--color-primary);
    cursor: pointer;
    padding: var(--space-xs) 0;
    font-family: inherit;
    font-size: var(--text-sm);
  }
  
  .toggle-icon {
    margin-right: var(--space-xs);
    transition: transform 0.3s ease;
  }
  
  .highlights-toggle[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }
  
  .project-highlights {
    margin: var(--space-md) 0;
    padding-left: var(--space-lg);
    color: var(--color-text);
    display: none;
  }
  
  .project-highlights.active {
    display: block;
    animation: fadeIn 0.3s ease forwards;
  }
  
  .project-highlights li {
    margin-bottom: var(--space-xs);
  }
  
  .project-highlights li:last-child {
    margin-bottom: 0;
  }
  
  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
    margin-top: auto;
    padding-top: var(--space-md);
  }
  
  .project-actions {
    display: flex;
    margin-top: var(--space-md);
    justify-content: flex-end;
  }
  
  .project-link {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-sm);
    background-color: var(--color-background-alt);
    color: var(--color-text);
    text-decoration: none;
    font-size: var(--text-sm);
    transition: all var(--transition-fast);
  }
  
  .project-link:hover {
    background-color: var(--color-primary-transparent);
    color: var(--color-primary);
    transform: translateY(-2px);
  }
  
  .icon {
    display: flex;
    align-items: center;
    transition: transform 0.2s ease;
  }
  
  .project-link:hover .icon {
    transform: scale(1.1);
  }

  @media (max-width: 768px) {
    .project-title {
      font-size: var(--text-md);
    }
    
    .project-image-container {
      height: 150px;
    }
  }
  
  @media print {
    .project-title {
      font-size: 14pt;
    }
    
    .external-link-icon {
      display: none;
    }
    
    .project-description {
      font-size: 10pt;
      margin-bottom: var(--space-sm);
    }
    
    .project-highlights {
      font-size: 9pt;
      margin: var(--space-sm) 0;
    }
    
    .project-image-container,
    .highlights-toggle,
    .project-link {
      display: none;
    }
  }
</style>

<script>
  // Activar la funcionalidad de mostrar/ocultar características destacadas
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons = document.querySelectorAll('.highlights-toggle');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!expanded).toString());
        
        const targetId = button.getAttribute('aria-controls');
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.classList.toggle('active');
            
            // Cambiar el texto del botón
            const buttonText = button.querySelector('span');
            if (buttonText) {
              buttonText.textContent = expanded ? 
                'Ver características destacadas' : 
                'Ocultar características';
            }
          }
        }
      });
    });
  });
</script>