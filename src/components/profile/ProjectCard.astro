---
// src/components/profile/ProjectCard.astro
import type { Project } from '@types';
import Card from '../ui/Card.astro';
import Tag from '../ui/Tag.astro';

interface Props {
  project: Project;
  featured?: boolean;
  showTitle?: boolean;
}

const { project, featured = false, showTitle = true } = Astro.props;

// Procesamos la URL del proyecto para obtener información adicional
const projectUrl = project.url ? new URL(project.url) : null;
const getPath = (url?: string) => url || '#';

---

<Card class={`project-card ${featured ? 'featured' : ''}`}>
  {showTitle && (
    <div class="project-header">
      <h3 class="project-title">
        <a href={getPath(project.url)} target="_blank" rel="noopener noreferrer">
          {project.name}
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="external-link-icon">
            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
            <polyline points="15 3 21 3 21 9"></polyline>
            <line x1="10" y1="14" x2="21" y2="3"></line>
          </svg>
        </a>
      </h3>
      
      {featured && <span class="featured-badge">Destacado</span>}
    </div>
  )}
  
  <p class="project-description">{project.description}</p>
  
  <!-- Highlights si existen -->
  {project.highlights && project.highlights.length > 0 && (
    <ul class="project-highlights">
      {project.highlights.map((highlight) => (
        <li>{highlight}</li>
      ))}
    </ul>
  )}
  
  <!-- Mostrar tecnologías como tags -->
  {project.technologies && project.technologies.length > 0 && (
    <div class="project-tags">
      {project.technologies.map((tech: string) => (
        <Tag text={tech} variant="default" size="small" />
      ))}
    </div>
  )}

  {projectUrl?.hostname === 'github.com' && (
    <div class="github-info">
      <span>Repositorio en GitHub</span>
    </div>
  )}
</Card>

<style>
  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-sm);
  }
  
  .project-title {
    font-size: var(--text-lg);
    margin: 0;
    color: var(--color-heading);
  }
  
  .project-title a {
    color: inherit;
    text-decoration: none;
    display: flex;
    align-items: center;
    transition: color var(--transition-fast);
  }
  
  .project-title a:hover {
    color: var(--color-primary);
  }
  
  .external-link-icon {
    margin-left: var(--space-xs);
    opacity: 0.7;
    transition: opacity var(--transition-fast), transform var(--transition-fast);
  }
  
  .project-title a:hover .external-link-icon {
    opacity: 1;
    transform: translateX(2px);
  }
  
  .project-description {
    margin-top: 0;
    margin-bottom: var(--space-md);
    color: var(--color-text);
    line-height: 1.5;
  }
  
  .project-highlights {
    margin: var(--space-md) 0;
    padding-left: var(--space-lg);
    color: var(--color-text);
  }
  
  .project-highlights li {
    margin-bottom: var(--space-xs);
  }
  
  .project-highlights li:last-child {
    margin-bottom: 0;
  }
  
  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
    margin-top: var(--space-md);
  }
  
  .featured-badge {
    font-size: var(--text-xs);
    background-color: var(--color-primary);
    color: var(--color-text-featured);
    padding: 2px var(--space-xs);
    border-radius: var(--radius-sm);
    font-weight: 500;
  }
  
  @media (max-width: 768px) {
    .project-title {
      font-size: var(--text-md);
    }
  }
  
  @media print {
    .project-title {
      font-size: 14pt;
    }
    
    .external-link-icon {
      display: none;
    }
    
    .project-description {
      font-size: 10pt;
      margin-bottom: var(--space-sm);
    }
    
    .project-highlights {
      font-size: 9pt;
      margin: var(--space-sm) 0;
    }
    
    .featured-badge {
      font-size: 8pt;
    }
  }
</style>