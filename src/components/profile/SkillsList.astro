---
// src/components/profile/SkillsList.astro
import type { Skill } from '@types';
import ErrorBoundary from '../common/ErrorBoundary.astro';
import Tag from '../ui/Tag.astro';
import Card from '../ui/Card.astro';

interface Props {
  skills: Skill[];
  showTitle?: boolean;
}

const { skills, showTitle = true } = Astro.props;

// Agrupar habilidades por tipo
const hardSkills = skills.filter(skill => skill.type === 'hard');
const softSkills = skills.filter(skill => skill.type === 'soft');

// Comprobar si hay habilidades para mostrar
const hasSkills = skills.length > 0;
---

<ErrorBoundary>
  <div class="skills-container animate-on-scroll" data-animation="fade-up">
    {showTitle && <h2 class="component-title">Habilidades</h2>}
    
    {!hasSkills && <p class="no-skills">No hay habilidades disponibles.</p>}
    
    {hasSkills && (
      <Card variant="border" class="skills-card">
        {hardSkills.length > 0 && (
          <div class="skills-section animate-on-scroll" data-animation="fade-in" data-delay="200">
            <h3>Habilidades Técnicas</h3>
            
            {hardSkills.map(skill => (
              <div class="skill-category staggered-item">
                <h4>{skill.name}</h4>
                {skill.keywords && skill.keywords.length > 0 && (
                  <div class="keywords">
                    {skill.keywords.map(keyword => (
                      <Tag text={keyword} variant="default" size="small" />
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
        
        {softSkills.length > 0 && (
          <div class="skills-section animate-on-scroll" data-animation="fade-in" data-delay="400">
            <h3>Habilidades Blandas</h3>
            
            {softSkills.map(skill => (
              <div class="skill-category staggered-item">
                {skill.keywords && skill.keywords.length > 0 && (
                  <div class="keywords">
                    {skill.keywords.map(keyword => (
                      <Tag text={keyword} variant="default" size="small" />
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </Card>
    )}
  </div>
</ErrorBoundary>

<style>
  .skills-container {
    width: 100%;
    margin-bottom: var(--space-md);
  }

  .no-skills {
    color: var(--color-text-secondary);
    font-style: italic;
  }

  .skills-card {
    padding: var(--space-md);
  }

  .skills-section {
    margin-bottom: var(--space-xl);
  }

  .skills-section:last-child {
    margin-bottom: 0;
  }

  h3 {
    font-size: var(--text-lg);
    margin-bottom: var(--space-md);
    color: var(--color-text-secondary);
    font-weight: 500;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--space-xs);
  }

  .skill-category {
    margin-bottom: var(--space-md);
  }

  h4 {
    font-size: var(--text-md);
    margin: 0 0 var(--space-xs) 0;
    color: var(--color-text);
    font-weight: 600;
  }

  .keywords {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }

  /* Estilos para impresión */
  @media print {
    .skills-container {
      margin-bottom: var(--space-md);
    }
    
    h3 {
      font-size: 12pt;
      margin-bottom: var(--space-sm);
    }
    
    .skill-category {
      page-break-inside: avoid;
      margin-bottom: var(--space-sm);
    }
    
    h4 {
      font-size: 10pt;
    }
    
    .keywords {
      font-size: 9pt;
    }
  }
</style>

<script>
  import { initAnimations } from '../../scripts/animateOnScroll.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    initAnimations();
  });
  
  document.addEventListener('astro:page-load', () => {
    initAnimations();
  });
</script>