---
import MainLayout from '@layouts/MainLayout.astro';
import { getProfileDataWithFallback } from '../data/api/profileData';
import type { Profile, SocialProfile } from '@types';
import ErrorBoundary from '@components/common/ErrorBoundary.astro';

const profile = await getProfileDataWithFallback();
---

<MainLayout title="Contacto - Edwin Méndez" description="Ponte en contacto conmigo para colaboraciones o proyectos." showPrintButton={false} profileData={{ basics: profile?.basics }}>
  <div class="contact-container">
    <h1>Contacto</h1>
    
    <div class="contact-grid">
      <div class="contact-info">
        <h2>Información de contacto</h2>
        <p class="contact-intro">¿Interesado en trabajar juntos? Ponte en contacto conmigo a través de cualquiera de estos canales o completa el formulario.</p>
        
        <div class="contact-channels">
          {profile?.basics?.email && (
            <div class="contact-channel">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                <polyline points="22,6 12,13 2,6"></polyline>
              </svg>
              <a href={`mailto:${profile.basics.email}`} class="channel-link">{profile.basics.email}</a>
            </div>
          )}
          
          {profile?.basics?.phone && (
            <div class="contact-channel">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
              </svg>
              <a href={`tel:${profile.basics.phone}`} class="channel-link">{profile.basics.phone}</a>
            </div>
          )}
          
          {profile?.basics?.location?.city && (
            <div class="contact-channel">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <span class="channel-link">{profile.basics.location.city}, {profile.basics.location.region}</span>
            </div>
          )}
          
          {profile?.basics?.profiles && profile.basics.profiles.length > 0 && (
            <div class="social-links">
              {profile.basics.profiles.map((social: SocialProfile) => (
                <a href={social.url} target="_blank" rel="noopener noreferrer" class="social-link" title={social.network}>
                  {social.network === 'GitHub' && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                    </svg>
                  )}
                  {social.network === 'LinkedIn' && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                      <rect x="2" y="9" width="4" height="12"></rect>
                      <circle cx="4" cy="4" r="2"></circle>
                    </svg>
                  )}
                  {social.network === 'Twitter' && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path>
                    </svg>
                  )}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>

      <div class="contact-form-container">
        <h2>Envíame un mensaje</h2>
        <form id="contact-form" class="contact-form" action="https://formspree.io/f/mldjorey" method="POST">
          <!-- Quitamos _next ya que usamos AJAX y no queremos redireccionamiento -->
          <input type="hidden" name="_subject" value="Nuevo mensaje desde el portfolio">
          <input type="hidden" name="_format" value="json">
          <div class="form-group">
            <label for="name">Nombre</label>
            <input type="text" id="name" name="name" required>  
          </div>
          
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          
          <div class="form-group">
            <label for="subject">Asunto</label>
            <input type="text" id="subject" name="subject" required>
          </div>
          
          <div class="form-group">
            <label for="message">Mensaje</label>
            <textarea id="message" name="message" rows="5" required></textarea>
          </div>
          
          <button type="submit" class="submit-button">Enviar mensaje</button>
        </form>
        <div id="form-success" class="form-success hidden">¡Mensaje enviado correctamente! Me pondré en contacto contigo pronto.</div>
        <div id="form-error" class="form-error hidden">Hubo un error al enviar el mensaje. Por favor, inténtalo de nuevo.</div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const contactForm = document.getElementById('contact-form') as HTMLFormElement | null;
    const formSuccess = document.getElementById('form-success') as HTMLElement | null;
    const formError = document.getElementById('form-error') as HTMLElement | null;
    
    // Verificamos si venimos de una redirección exitosa (por si acaso)
    if (window.location.search.includes('success=true')) {
      formSuccess?.classList.remove('hidden');
      setTimeout(() => {
        formSuccess?.classList.add('hidden');
      }, 5000);
    }
    
    // Enviamos el formulario mediante AJAX para evitar redirección
    contactForm?.addEventListener('submit', (e) => {
      e.preventDefault(); // Evitamos el envío tradicional del formulario
      
      const formData = new FormData(contactForm);
      
      // Indicador de carga (opcional)
      // const loadingElement = document.createElement('div');
      // loadingElement.innerText = 'Enviando...';
      // contactForm.appendChild(loadingElement);
      
      fetch(contactForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        },
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        }
        throw new Error('Error en la red');
      })
      .then(data => {
        // Éxito - mostramos mensaje y limpiamos formulario
        contactForm.reset();
        formSuccess?.classList.remove('hidden');
        
        setTimeout(() => {
          formSuccess?.classList.add('hidden');
        }, 5000);
      })
      .catch(error => {
        // Error - mostramos mensaje de error
        console.error('Error:', error);
        formError?.classList.remove('hidden');
        
        setTimeout(() => {
          formError?.classList.add('hidden');
        }, 5000);
      });
    });
  });
</script>

<style>
  .contact-container {
    max-width: 800px;
    margin: 0 auto;
    padding: var(--space-md);
  }
  
  h1 {
    font-size: var(--text-3xl);
    margin-bottom: var(--space-xl);
    color: var(--color-primary);
  }
  
  h2 {
    font-size: var(--text-xl);
    margin-bottom: var(--space-md);
    color: var(--color-text);
  }
  
  .contact-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-xl);
  }
  
  .contact-intro {
    margin-bottom: var(--space-lg);
    line-height: 1.6;
    color: var(--color-text-light);
  }
  
  .contact-channels {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
  }
  
  .contact-channel {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .channel-link {
    color: var(--color-text);
    text-decoration: none;
    transition: color var(--transition-fast);
  }
  
  .channel-link:hover {
    color: var(--color-primary);
  }
  
  .social-links {
    display: flex;
    gap: var(--space-md);
    margin-top: var(--space-md);
  }
  
  .social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--color-action-light);
    color: var(--color-text);
    transition: all var(--transition-fast);
  }
  
  .social-link:hover {
    background-color: var(--color-primary);
    color: var(--color-primary-contrast);
    transform: translateY(-2px);
  }
  
  /* Formulario */
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }
  
  label {
    font-weight: 500;
    color: var(--color-text);
  }
  
  input, textarea {
    font-family: var(--font-family-mono);
    padding: var(--space-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-sm);
    background-color: var(--color-card);
    color: var(--color-text);
    font-size: var(--text-sm);
    transition: border-color var(--transition-fast);
  }
  
  input:focus, textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 2px rgba(0, 170, 179, 0.2);
  }
  
  .submit-button {
    font-family: var(--font-family-mono);
    background-color: var(--color-primary);
    color: var(--color-primary-contrast);
    border: none;
    border-radius: var(--radius-sm);
    padding: var(--space-sm) var(--space-lg);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-fast);
    margin-top: var(--space-sm);
    align-self: flex-start;
  }
  
  .submit-button:hover {
    background-color: var(--color-primary-dark);
    transform: translateY(-2px);
  }
  
  .form-success, .form-error {
    margin-top: var(--space-md);
    padding: var(--space-sm);
    border-radius: var(--radius-sm);
    font-weight: 500;
  }
  
  .form-success {
    background-color: rgba(0, 200, 83, 0.1);
    color: #00c853;
  }
  
  .form-error {
    background-color: rgba(244, 67, 54, 0.1);
    color: var(--color-error);
  }
  
  .hidden {
    display: none;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .contact-grid {
      grid-template-columns: 1fr;
    }
    
    .contact-form-container {
      order: -1;
    }
  }
  
  @media (max-width: 480px) {
    .submit-button {
      width: 100%;
    }
  }
</style>
