---
import MainLayout from '@layouts/MainLayout.astro';
import ProjectCard from '@components/profile/ProjectCard.astro';
import ErrorBoundary from '@components/common/ErrorBoundary.astro';
import { getProfileDataWithFallback } from '../../data/api/profileData';
import type { Profile } from '@types';

// Utilizamos el método con fallback para mayor robustez
let profile: Profile | null = null;
let error: Error | null = null;

try {
  profile = await getProfileDataWithFallback();
} catch (e) {
  error = e instanceof Error ? e : new Error(String(e));
  console.error('Error al cargar datos del perfil:', error);
}

// Ordenar proyectos: primero los destacados, luego el resto
const sortedProjects = profile?.projects 
  ? [...profile.projects].sort((a, b) => (b.featured ? 1 : 0) - (a.featured ? 1 : 0))
  : [];
---

<MainLayout 
  title={profile ? `Proyectos - ${profile.basics.name} ${profile.basics.last_name}` : 'Proyectos'} 
  description="Portafolio de proyectos de desarrollo y tecnología"
  profileData={profile ? { basics: profile.basics } : undefined}
>
  <div class="projects-page">
    <header class="page-header">
      <h1>Proyectos</h1>
      <p class="description">Aquí encontrarás una colección de mis proyectos más relevantes, incluyendo tecnologías utilizadas y resultados obtenidos.</p>
    </header>

    {error && (
      <div class="error-state">
        <h2>No se pudieron cargar los datos</h2>
        <p>Hubo un problema al obtener la información de proyectos. Por favor, intenta nuevamente más tarde.</p>
        {import.meta.env.DEV && <pre>{error.message}</pre>}
      </div>
    )}

    {profile && sortedProjects.length > 0 ? (
      <div class="projects-grid">
        {sortedProjects.map(project => (
          <ErrorBoundary>
            <ProjectCard project={project} featured={project.featured} />
          </ErrorBoundary>
        ))}
      </div>
    ) : (
      <p class="no-projects">No hay proyectos disponibles para mostrar.</p>
    )}
  </div>
</MainLayout>

<style>
  .projects-page {
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-header {
    margin-bottom: var(--space-xl);
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--space-md);
  }

  h1 {
    font-size: var(--text-3xl);
    margin-bottom: var(--space-sm);
    color: var(--color-text);
  }

  .description {
    color: var(--color-text-light);
    max-width: 800px;
    line-height: 1.6;
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
    gap: var(--space-lg);
  }

  .error-state {
    padding: var(--space-lg);
    border: 1px solid var(--color-error);
    border-radius: var(--radius-md);
    margin-bottom: var(--space-xl);
  }

  .error-state h2 {
    color: var(--color-error);
    margin-bottom: var(--space-sm);
  }

  .error-state pre {
    background-color: rgba(0, 0, 0, 0.05);
    padding: var(--space-md);
    border-radius: var(--radius-sm);
    overflow-x: auto;
    font-family: var(--font-family-mono);
  }

  .no-projects {
    font-style: italic;
    color: var(--color-text-light);
    margin: var(--space-xl) 0;
    text-align: center;
  }

  @media (max-width: 768px) {
    .projects-grid {
      grid-template-columns: 1fr;
    }
  }

  @media print {
    .projects-page {
      display: none;
    }
  }
</style>